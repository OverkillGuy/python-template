[project]
name = "{{ package_name }}"
description = "{{description}}"
authors = [ { name= "{{author_name}}", email= "{{author_email}}" } ]
readme = "README.md"
{%- if dynamic_versioning %}
# Using uv-dynamic-versioning
dynamic = ["version"]
{% else %}
version = "0.1.0"
{% endif %}
requires-python = ">={{python_version}}"
dependencies = []

[project.optional-dependencies]
docs = [
    "sphinx == 7.3.7",
    "sphinx-rtd-theme == 1.3.0",
    "myst-parser == 3.0.1",
    "sphinx-autodoc2 == 0.5.0",
    "sphinxcontrib-programoutput == 0.17",
    "sphinx-jinja == 2.0.2",
    "doc2dash == 3.1.0",]
test = [
    "pytest == 7.4.4",
    "pytest-cov == 5.0.0",
    "pytest-clarity == 1.0.1",
    "pytest-datadir == 1.5.0",]

[project.scripts]
{{project_slug}} = "{{ package_name }}.cli:cli"


[build-system]
{%- if dynamic_versioning %}
# Override of default uv build system, using dynamic version plugin
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
{% else %}
requires = ["hatchling"]
build-backend = "hatchling.build"
{% endif %}

[tool.pytest.ini_options]
addopts = """-vv \
      --doctest-modules \
      --cov={{ package_name }} \
      --cov-report=xml:test_results/coverage.xml \
      --cov-report=html:test_results/coverage.html \
      --cov-report=term \
      --junit-xml=test_results/results.xml"""

[tool.coverage.run]
omit = [
  "src/{{ package_name }}/tests/**",
  "tests/**",
]

[tool.ruff]
# Always fix what you can, without needing CLI flags
fix = true
line-length = 88  # Like black
extend-exclude = ["docs/*"]

[tool.ruff.lint]
unfixable = [
    "ERA", # do not autoremove commented out code
]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Add I = isort (import sorter), to remove need for isort itself
# And D = pydocstyle for docstrings
select = ["E", "F", "I", "D"]
# D400/D415 = First line (of dosctrings) should end with [.?!]
extend-ignore = ["D400", "D415"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
# Use Google-style docstrings
pydocstyle = {convention = "google"}

[tool.mypy]
python_version = "{{python_version}}"
check_untyped_defs = true
