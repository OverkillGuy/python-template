[tool.poetry]
name = "{{ package_name }}"
description = "{{description}}"
authors = ["{{author_name}} <{{author_email}}>"]
readme = "README.md"
{%- if dynamic_versioning %}
version = "0.0.0"  # Overriden by dynamic-versioning below!

[tool.poetry-dynamic-versioning]
# Use a poetry plugin to determine how the package is versioned
# We use the default = git tag as number
enable = true
vcs = "git"
{% else %}
version = "0.1.0"
{% endif %}

[tool.poetry.scripts]
{{project_slug}} = "{{ package_name }}.cli:cli"

[tool.poetry.dependencies]
python = "^{{python_version}}"


[tool.poetry.group.test.dependencies]
pytest = "7.*"
# Test coverage
pytest-cov = "4.*"
# Clearer assertion failures (colorful diff)
pytest-clarity = "1.*"


[tool.poetry.group.docs.dependencies]
# Main documentation-as-code (HTML/PDF generator)
Sphinx = "*"
# Read the docs (pretty) theme for sphinx
sphinx-rtd-theme = "1.*"
# Markdown parser for sphinx: Sphinx uses "RST" files, this adds markdown
myst-parser = "*"
# Automatic Python module docs (javadoc-style)
sphinx-autodoc2 = "*"
# Generate Dash/Zeal "docsets" (offline dev-docs package) from HTML docs
doc2dash = "*"


[build-system]
{%- if dynamic_version %}
# Small override of default Poetry build system, using dynamic version plugin
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
{% else %}
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{% endif %}

[tool.pytest.ini_options]
addopts = """-vv \
      --doctest-modules \
      --cov={{ package_name }} \
      --cov-report=xml:test_results/coverage.xml \
      --cov-report=html:test_results/coverage.html \
      --cov-report=term \
      --junit-xml=test_results/results.xml"""

[tool.coverage.run]
omit = [
  "src/{{ package_name }}/tests/**",
  "tests/**",
]

[tool.ruff]
# Always fix what you can, without needing CLI flags
fix = true
line-length = 88  # Like black
extend-exclude = ["docs/*"]

[tool.ruff.lint]
unfixable = [
    "ERA", # do not autoremove commented out code
]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Add I = isort (import sorter), to remove need for isort itself
# And D = pydocstyle for docstrings
select = ["E", "F", "I", "D"]
# D400/D415 = First line (of dosctrings) should end with [.?!]
extend-ignore = ["D400", "D415"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
# Use Google-style docstrings
pydocstyle = {convention = "google"}

[tool.mypy]
python_version = "{{python_version}}"
check_untyped_defs = true

[tool.bumpversion]
allow_dirty = false
commit = true
message = "Bump to version v{new_version}"
tag = true
tag_message = "Release v{new_version}"
setup_hooks = ["make"]

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "## [Unreleased]"
replace = "## [Unreleased]\n\n## v{new_version} - {now:%Y-%m-%d}"

{%- if not dynamic_versioning %}
[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
{% endif -%}
